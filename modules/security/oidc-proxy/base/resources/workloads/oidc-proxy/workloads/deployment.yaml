apiVersion: apps/v1
kind: Deployment
metadata:
  name: oidc-proxy
  annotations:
    distribution.mia-platform.eu/certificate-ca-key: ca
spec:
  revisionHistoryLimit: 5
  selector:
    matchLabels: {}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  minReadySeconds: 0
  template:
    spec:
      serviceAccountName: oidc-proxy
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 60
      hostNetwork: false
      hostPID: false
      hostIPC: false
      initContainers:
      - name: kube-webhook-certgen
        image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:latest
        resources: {}
        args:
        - create
        - --host=dex.localhost,$(SERVICE_NAME),$(SERVICE_NAME).$(POD_NAMESPACE).svc
        - --namespace=$(POD_NAMESPACE)
        - --secret-name=$(SECRET_NAME)
        - --cert-name=tls.crt
        - --key-name=tls.key
        env:
        - name: SERVICE_NAME
          value: oidc-proxy
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SECRET_NAME
          value: oidc-proxy-tls
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          privileged: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: serviceaccount-token
          readOnly: true
      containers:
      - name: oidc-proxy
        image: docker.io/tremolosecurity/kube-oidc-proxy:latest
        resources: {}
        command:
        - kube-oidc-proxy
        args:
        - --secure-port=$(CONTROLLER_PORT)
        - --readiness-probe-port=$(READINESS_PORT)
        - --tls-cert-file=/etc/oidc-proxy/tls/tls.crt
        - --tls-private-key-file=/etc/oidc-proxy/tls/tls.key
        - --oidc-client-id=$(OIDC_CLIENT_ID)
        - --oidc-issuer-url=$(OIDC_ISSUER_URL)
        - --oidc-username-claim=$(OIDC_USERNAME_CLAIM)
        - --oidc-groups-claim=$(OIDC_GROUPS_CLAIM)
        - --oidc-ca-file=$(OIDC_CA_FILE_PATH)
        env:
        - name: CONTROLLER_PORT
          value: VALUE
        - name: READINESS_PORT
          value: VALUE
        - name: OIDC_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: oidc-config
              key: oidc.client-id
        - name: OIDC_ISSUER_URL
          valueFrom:
            secretKeyRef:
              name: oidc-config
              key: oidc.issuer-url
        - name: OIDC_USERNAME_CLAIM
          valueFrom:
            secretKeyRef:
              name: oidc-config
              key: oidc.username-claim
        - name: OIDC_GROUPS_CLAIM
          valueFrom:
            secretKeyRef:
              name: oidc-config
              key: oidc.groups-claim
        - name: OIDC_CA_FILE_PATH
          value: /etc/ssl/certs/ca-certificates.crt
        ports:
        - name: controller
          containerPort: 11280
          protocol: TCP
        - name: readiness
          containerPort: 11281
          protocol: TCP
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: /ready
            port: readiness
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          privileged: false
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: oidc-proxy-tls
          mountPath: /etc/oidc-proxy/tls
          readOnly: true
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: serviceaccount-token
          readOnly: true
      volumes:
      - name: oidc-proxy-tls
        secret:
          secretName: oidc-proxy-tls
          optional: true
      - name: serviceaccount-token
        projected:
          defaultMode: 0444
          sources:
          - serviceAccountToken:
              expirationSeconds: 3600
              path: token
          - configMap:
              items:
              - key: ca.crt
                path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
              - fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
                path: namespace
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels: {}
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 48080
        runAsGroup: 48080
        fsGroup: 48080
